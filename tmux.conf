########## RESET THE COMMAND PREFIX #############
#        Set the command key to backtick        #
            set-option -g prefix `
#################################################

##############################
# Setup addition keybindings #
##############################

# <prefix> n to create a new window
bind n new-window

# <prefix> s to split horizontally
bind s split-window -h

# <prefix> S to split horizontally
bind S split-window -v

# <prefix> , or . to go to the prev or next window, < or > to move it
bind -r , previous-window
bind -r . next-window
bind < swap-window -t :-
bind > swap-window -t :+

# <prefix> hjkl to Vim style movement between panes
bind -r h select-pane -L
bind -r j select-pane -D
bind -r k select-pane -U
bind -r l select-pane -R

# <prefix> HJKL to resize pane in that direction
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# Smart pane switching with awareness of vim splits
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# <prefix> - to last window
bind - last-window

# <prefix> r to rename window
bind-key r command-prompt 'rename-window %%'

# <prefix> <prefix> to actually send through the prefix character
bind ` send-prefix

# <prefix> ESC for copy mode
bind Escape copy-mode
set -sg escape-time 0

# <prefix> p to paste buffer
unbind p
bind p paste-buffer

# <prefix> P to choose which buffer to paste
bind P choose-buffer

# In copy mode:
## v to vi-like visual selection
bind -t vi-copy 'v' begin-selection
## y to vi-like yank (copy to buffer)
bind -t vi-copy 'y' copy-selection

# <prefix> Ctrl-c to copy to system clipboard (requires xclip)
bind C-c run "tmux save-buffer - | xclip -i -sel clipboard"

# <prefix> Ctrl-v to paste from system clipboard (requires xclip)
bind C-v run "tmux set-buffer \"$(xclip -o -sel clipboard)\"; tmux paste-buffer"

# <prefix> Q to kill the pane
bind Q kill-pane

# <prefix> Ctrl+Q to kill the whole session- use with care!
bind C-Q kill-session

# <prefix> R to reload the tmux config
bind R source-file ~/.tmux.conf \; display-message "Config reloaded"

# <prefix> a to send C-a through to applications
bind C-a send-prefix

# <prefix> r to record commands in this pane
bind C-r pipe-pane -o "cat >>~/#S_#W.log" \; display "Toggled logging to ~/#S_#W.log"

# <prefix> y to toggle sending keystokes to all panes
bind y setw synchronize-panes

###############################
#   Setup behavioural stuff   #
###############################

# Lower the time before keypresses are sent through
set -s escape-time 1

# Set windows and panes to index from 1 (it's left-most on the keyboard, it's not an array)
set -g base-index 1
setw -g pane-base-index 1

# Lets use the vi style keys
set -g mode-keys vi

# Toggle mouse mode, thanks to https://github.com/npinto/dotfiles/blob/master/tmux/.tmux.conf
bind m run "if [[ `tmux show-option -w | grep mode-mouse.*on` ]]; then toggle=off; else toggle=on; fi; tmux display-message \"mouse tmux: \$toggle\"; tmux set-option -w mode-mouse \$toggle &> /dev/null; for cmd in mouse-select-pane mouse-resize-pane mouse-select-window; do tmux set-option -g \$cmd \$toggle &> /dev/null; done;"

# Highlight unfocused windows which have activity
setw -g monitor-activity on
set -g visual-activity on

# Make XTerm key bindings work, like C-<left> for skipping left 1 word
set-window-option -g xterm-keys on

# Window names displayed
set-window-option -g window-status-format " #I: #W "
set-window-option -g window-status-current-format " #I: #W "
set-window-option -g window-status-separator "|"

# When more than 1 session is attached, resize windows when only when they have multiple viewers
# (the default resizes all windows as soon as the 2nd session attaches)
setw -g aggressive-resize on

###############################
#        Setup Colours        #
###############################

# Make sure tmux knows we have some serious colour power
set -g default-terminal "screen-256color"

set-option -g status-bg "colour235"
set-option -g status-fg "colour249"

# General window tabs
setw -g window-status-fg "colour111"
setw -g window-status-bg "colour27"
setw -g window-status-current-attr dim

# Active window tab
setw -g window-status-activity-fg "colour228"
setw -g window-status-activity-bg "colour27"
setw -g window-status-activity-attr bright

# Current window tab
setw -g window-status-current-fg "colour15"
setw -g window-status-current-bg "colour39"
setw -g window-status-current-attr bright

set -g pane-border-fg "colour238"
set -g pane-active-border-fg "colour24"
set -g pane-active-border-bg "colour24"

###############################
#       Setup Status Bar      #
###############################

set-option -g status on
set-option -g status-interval 5
set-option -g status-utf8 on
set-option -g status-left-length 30
set-option -g status-left "#[bg=colour22]#[fg=colour118] #S #I.#P "
set-option -g status-right-length 30
set-option -g status-right "#[bg=colour54]#[fg=colour147] #H "
set-option -g status-justify "centre"
