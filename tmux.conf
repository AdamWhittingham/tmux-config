########## RESET THE COMMAND PREFIX #############
#        Set the command key to backtick        #
            set-option -g prefix `
#################################################

##############################
# Setup addition keybindings #
##############################

# <prefix> n to create a new window
bind-key n new-window

# <prefix> s to split horizontally
bind-key s split-window -h -c '#{pane_current_path}'

# <prefix> S to split horizontally
bind-key S split-window -v -c '#{pane_current_path}'

# <prefix> , or . to go to the prev or next window, < or > to move it
bind-key -r , previous-window
bind-key -r . next-window
bind-key < swap-window -t :-
bind-key > swap-window -t :+
bind-key M-{ swap-window -t :-
bind-key M-\} swap-window -t :+

# <prefix> hjkl to Vim style movement between panes
bind-key -r h select-pane -L
bind-key -r j select-pane -D
bind-key -r k select-pane -U
bind-key -r l select-pane -R

# <prefix> HJKL to resize pane in that direction
bind-key -r H resize-pane -L 10
bind-key -r J resize-pane -D 5
bind-key -r K resize-pane -U 5
bind-key -r L resize-pane -R 10

# Smart pane switching with awareness of vim splits
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
bind-key -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind-key -n C-\\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# <prefix> m/M to pull/send a pane to another window
bind-key m command-prompt -p "Send pane to:"  "join-pane -t '%%'"
bind-key M command-prompt -p "Merge pane from:"  "join-pane -s '%%'"

# Add better paste buffer choosing
bind-key b list-buffers  # list paste buffers
bind-key p paste-buffer  # paste from the top paste buffer
bind-key P choose-buffer # choose which buffer to paste from

# Better search mode
bind -T copy-mode-vi / command-prompt -i -p "(search down)" "send -X search-forward-incremental \"%%%\""
bind -T copy-mode-vi ? command-prompt -i -p "(search up)" "send -X search-backward-incremental \"%%%\""
bind-key -T copy-mode-vi 'v' send -X begin-selection # Vim-like visual selection
bind-key -T copy-mode-vi 'y' send-keys -X copy-pipe-and-cancel 'pbcopy' # `y` to yank to system clipboard

bind-key - last-window # Switch to last used window
bind-key r command-prompt 'rename-window %%' # Rename window
bind-key ` send-prefix # Double prefix to send literal backtick

# <prefix> ESC for copy mode
bind-key Escape copy-mode
set -sg escape-time 0

# Kill windows and session
bind-key Q kill-pane
bind-key C-Q kill-session

bind-key R source-file ~/.tmux.conf \; display-message "Config reloaded"

bind-key C-r pipe-pane -o "cat >>~/#S_#W.log" \; display "Toggled logging to ~/#S_#W.log"
bind-key y setw synchronize-panes

###############################
#   Setup behavioural stuff   #
###############################

# More scrollback history (at the cost of more RAM)
set-option -g history-limit 25000

# Lower the time before keypresses are sent through
set -s escape-time 1

# Set windows and panes to index from 1 (it's left-most on the keyboard, it's not an array)
set -g base-index 1
setw -g pane-base-index 1

# Lets use the vi style keys
set -g mode-keys vi

# Turn on Mouse mode and add mouse scrolling
set -g mouse on
bind-key -n WheelUpPane   select-pane -t= \; copy-mode -e \; send-keys -M
bind-key -n WheelDownPane select-pane -t= \;                 send-keys -M

bind-key -T root WheelUpPane   if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; copy-mode -e; send-keys -M"
bind-key -T root WheelDownPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; send-keys -M"

# Highlight unfocused windows which have activity
setw -g monitor-activity on
set -g visual-activity off

# Calm down
set -g visual-bell off
set -g visual-silence off
set -g bell-action none

# Make XTerm key bindings work, like C-<left> for skipping left 1 word
set-window-option -g xterm-keys on

# Set Terminal titles where possible
set-option -g set-titles on
set-option -g set-titles-string '#S: #W'

# Window names displayed
set-window-option -g window-status-format "#[bg=color236 ] #I #[bg=default] #W "
set-window-option -g window-status-current-format "#[bg=color27 ] #I #[bg=default] #W "
set-window-option -g window-status-separator " "

# When more than 1 session is attached, resize windows when only when they have multiple viewers
# (the default resizes all windows as soon as the 2nd session attaches)
setw -g aggressive-resize on

set-option -g focus-events on

###############################
#        Setup Colours        #
###############################

# Make sure tmux knows we have some serious colour power
set -ga terminal-overrides ",*256col*:Tc"           # true colous support

# Undercurl
set -g default-terminal "${TERM}"
set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'  # undercurl support
set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'  # underscore colours - needs tmux-3.0

set -g status-style "fg=colour15,bg=default"

# Tab styling
set -g window-status-style "fg=colour254,bg=colour235"
set -g window-status-activity-style "fg=colour255,bg=colour238,bright"
set -g window-status-current-style "fg=colour255,bg=colour25"

# Dividing border colours
set -g pane-border-style "fg=colour234,bg=colour235"
set -g pane-active-border-style "fg=colour25,bg=default"

###############################
#       Setup Status Bar      #
###############################

set-option -g status on
set-option -g status-position bottom
set-option -g status-interval 3
set-option -g status-justify "centre"

set-option -g status-left-length 40

set-option -g status-right "#[fg=color234,bg=color61]  #S #I.#P #[fg=default,bg=default] #[fg=color234,bg=colour60] 󰇅 #(~/.tmux-config/ssh-hostname.sh #{pane_tty}) #[fg=default,bg=default] #(~/.tmux-config/battery.sh -t -b) "
set-option -g status-right-length 60
