########## RESET THE COMMAND PREFIX #############
#        Set the command key to backtick        #
            set-option -g prefix `
#################################################

set -g default-command "which reattach-to-user-namespace > /dev/null && reattach-to-user-namespace -l $SHELL || $SHELL -l"

##############################
# Setup addition keybindings #
##############################

# <prefix> n to create a new window
bind n new-window

# <prefix> s to split horizontally
bind s split-window -h -c '#{pane_current_path}'

# <prefix> S to split horizontally
bind S split-window -v -c '#{pane_current_path}'

# <prefix> , or . to go to the prev or next window, < or > to move it
bind -r , previous-window
bind -r . next-window
bind < swap-window -t :-
bind > swap-window -t :+

# <prefix> hjkl to Vim style movement between panes
bind -r h select-pane -L
bind -r j select-pane -D
bind -r k select-pane -U
bind -r l select-pane -R

# <prefix> HJKL to resize pane in that direction
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# Smart pane switching with awareness of vim splits
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# Add better paste buffer choosing
bind b list-buffers  # list paste buffers
bind p paste-buffer  # paste from the top paste buffer
bind P choose-buffer # choose which buffer to paste from

# <prefix> - to last window
bind - last-window

# <prefix> r to rename window
bind-key r command-prompt 'rename-window %%'

# <prefix> <prefix> to actually send through the prefix character
bind ` send-prefix

# <prefix> ESC for copy mode
bind Escape copy-mode
set -sg escape-time 0

# <prefix> p to paste buffer
unbind p
bind p paste-buffer

# <prefix> P to choose which buffer to paste
bind P choose-buffer

# <prefix> r to reload the config
bind-key r source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded"

# In copy mode:
## v to vi-like visual selection
bind-key -Tcopy-mode-vi 'v' send -X begin-selection
## y to vi-like yank (copy to buffer)
bind-key -Tcopy-mode-vi 'y' send -X copy-selection

# <prefix> Q to kill the pane
bind Q kill-pane

# <prefix> Ctrl+Q to kill the whole session- use with care!
bind C-Q kill-session

# <prefix> R to reload the tmux config
bind R source-file ~/.tmux.conf \; display-message "Config reloaded"

# <prefix> r to record commands in this pane
bind C-r pipe-pane -o "cat >>~/#S_#W.log" \; display "Toggled logging to ~/#S_#W.log"

# <prefix> y to toggle sending keystokes to all panes
bind y setw synchronize-panes

###############################
#   Setup behavioural stuff   #
###############################

# Lower the time before keypresses are sent through
set -s escape-time 1

# Set windows and panes to index from 1 (it's left-most on the keyboard, it's not an array)
set -g base-index 1
setw -g pane-base-index 1

# Lets use the vi style keys
set -g mode-keys vi

# Turn on Mouse mode and add mouse scrolling
set -g mouse on
bind -n WheelUpPane   select-pane -t= \; copy-mode -e \; send-keys -M
bind -n WheelDownPane select-pane -t= \;                 send-keys -M

bind-key -T root WheelUpPane   if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; copy-mode -e; send-keys -M"
bind-key -T root WheelDownPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; send-keys -M"

# Highlight unfocused windows which have activity
setw -g monitor-activity on
set -g visual-activity off

# Make XTerm key bindings work, like C-<left> for skipping left 1 word
set-window-option -g xterm-keys on

# Set Terminal titles where possible
set-option -g set-titles on
set-option -g set-titles-string '#S: #W'

# Window names displayed
set-window-option -g window-status-format " #I │ #W "
set-window-option -g window-status-current-format " #I │ #W "
set-window-option -g window-status-separator " "

# When more than 1 session is attached, resize windows when only when they have multiple viewers
# (the default resizes all windows as soon as the 2nd session attaches)
setw -g aggressive-resize on

###############################
#        Setup Colours        #
###############################

# Make sure tmux knows we have some serious colour power
set -g default-terminal "tmux-256color"
set-option -sa terminal-overrides ",*:Tc,*:U8=0"

set -g bell-action none

set -g status-style "fg=colour251,bg=colour236"

# Tab styling
set -g window-status-style "fg=colour255,bg=colour239"
set -g window-status-activity-style "fg=colour255,bg=colour239,bright"
set -g window-status-current-style "fg=colour255,bg=colour25,bright"

# Dividing border colours
set -g pane-border-style "fg=colour236,bg=colour235"
set -g pane-active-border-style "fg=colour25,bg=default"

###############################
#      Setup Font Options     #
###############################

if-shell '[ "$POWERLINE" == "1" ]' \
  'RIGHT_CAP=""' \
  'RIGHT_CAP=""'

if-shell '[ "$POWERLINE" == "1" ]' \
  'LEFT_CAP=""' \
  'LEFT_CAP=""'

###############################
#       Setup Status Bar      #
###############################

set-option -g status on
set-option -g status-position bottom
set-option -g status-interval 3
set-option -g status-justify "centre"

set-option -g status-left "#[bg=colour234]#[fg=colour39]#S #I.#P #[fg=colour234,bg=default]$RIGHT_CAP"
set-option -g status-left-length 25
set -g status-left-attr bold

set-option -g status-right "#[fg=colour234]#[bg=default]$LEFT_CAP#[bg=colour234]#[fg=colour39] #(~/.tmux-config/ssh-hostname.sh #{pane_tty}) #(~/.tmux-config/battery.sh -t)#[fg=yellow,bg=colour234] %H:%M#[default]"
set-option -g status-right-length 25
set -g status-right-attr bold
